/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FishingTracker;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JComponent;
import javax.swing.JOptionPane;

/**
 *
 * @author Dylan
 */
public class FishInputGUI extends javax.swing.JFrame {

    /**
     * Creates new form FishGUI
     */
    private ArrayList<Fish> fishList;

    ///variables to track fish cought for quotas
    private int tunaCounter = 5;
    private int herringCounter = 10;
    private int codCounter = 100;

    public FishInputGUI() {
        initComponents();
        getContentPane().setBackground(new java.awt.Color(173, 216, 230)); // Light blue
        loadFishFile();
        fishList = new ArrayList<>();

        ///create an array of lables and text fields
        JComponent[] hideOptions = {
            fishIDLBL, fishIDTF, colourLBL, colourTF, changeLBL, specificInputTF
        };
        // for loop to set the lables and text fields not visible
        for (JComponent component : hideOptions) {
            component.setVisible(false);
        }
        // creating active listener to change lables depending on what user selects in combo box
        fishCB.addActionListener(e -> {
            String fishSelected = (String) fishCB.getSelectedItem();
            //set them visible when option in combox box is selected
            for (JComponent component : hideOptions) {
                component.setVisible(true);
            }
            //Change text for changeLBL depending on what fish is selected
            if ("Tuna".equals(fishSelected)) {
                changeLBL.setText("Weight (kg):");
            } else if ("Herring".equals(fishSelected)) {
                changeLBL.setText("Age:");
            } else if ("Cod".equals(fishSelected)) {
                changeLBL.setText("Length (cm):");
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fishCoughtLBL = new javax.swing.JLabel();
        addBTN = new javax.swing.JButton();
        displayBTN = new javax.swing.JButton();
        QuotaBTN = new javax.swing.JButton();
        deleteBTN = new javax.swing.JButton();
        exitBTN = new javax.swing.JButton();
        returnBTN = new javax.swing.JButton();
        appNameLBL = new javax.swing.JLabel();
        fishCB = new javax.swing.JComboBox<>();
        fishIMG2LBL = new javax.swing.JLabel();
        fishIMG1LBL = new javax.swing.JLabel();
        fishIDLBL = new javax.swing.JLabel();
        colourLBL = new javax.swing.JLabel();
        fishIDTF = new javax.swing.JTextField();
        colourTF = new javax.swing.JTextField();
        specificInputTF = new javax.swing.JTextField();
        changeLBL = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultTA = new javax.swing.JTextArea();
        searchBTN = new javax.swing.JButton();
        infoLBL = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocationByPlatform(true);

        fishCoughtLBL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        fishCoughtLBL.setText("Fish Cought:");

        addBTN.setBackground(new java.awt.Color(0, 0, 204));
        addBTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        addBTN.setForeground(new java.awt.Color(255, 255, 255));
        addBTN.setText("Add");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        displayBTN.setBackground(new java.awt.Color(0, 0, 204));
        displayBTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        displayBTN.setForeground(new java.awt.Color(255, 255, 255));
        displayBTN.setText("Display");
        displayBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBTNActionPerformed(evt);
            }
        });

        QuotaBTN.setBackground(new java.awt.Color(0, 0, 204));
        QuotaBTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        QuotaBTN.setForeground(new java.awt.Color(255, 255, 255));
        QuotaBTN.setText("Quotas");
        QuotaBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuotaBTNActionPerformed(evt);
            }
        });

        deleteBTN.setBackground(new java.awt.Color(0, 0, 204));
        deleteBTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        deleteBTN.setForeground(new java.awt.Color(255, 255, 255));
        deleteBTN.setText("Delete");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        exitBTN.setBackground(new java.awt.Color(0, 0, 204));
        exitBTN.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        exitBTN.setForeground(new java.awt.Color(255, 255, 255));
        exitBTN.setText("Exit");
        exitBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitBTNActionPerformed(evt);
            }
        });

        returnBTN.setBackground(new java.awt.Color(0, 0, 204));
        returnBTN.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        returnBTN.setForeground(new java.awt.Color(255, 255, 255));
        returnBTN.setText("Fisherman Log");
        returnBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                returnBTNActionPerformed(evt);
            }
        });

        appNameLBL.setFont(new java.awt.Font("Arial", 1, 24)); // NOI18N
        appNameLBL.setText("Fishing Tracker App");

        fishCB.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        fishCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cod", "Tuna", "Herring" }));

        fishIMG2LBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FishImages/fish.PNG"))); // NOI18N
        fishIMG2LBL.setText("jLabel1");

        fishIMG1LBL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/FishImages/FISH3.PNG"))); // NOI18N

        fishIDLBL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        fishIDLBL.setText("Fish ID");

        colourLBL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        colourLBL.setText("Colour:");

        changeLBL.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        changeLBL.setText("TEST");

        resultTA.setColumns(20);
        resultTA.setRows(5);
        jScrollPane1.setViewportView(resultTA);

        searchBTN.setBackground(new java.awt.Color(0, 0, 204));
        searchBTN.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        searchBTN.setForeground(new java.awt.Color(255, 255, 255));
        searchBTN.setText("SEARCH");
        searchBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBTNActionPerformed(evt);
            }
        });

        infoLBL.setFont(new java.awt.Font("Arial", 2, 12)); // NOI18N
        infoLBL.setForeground(new java.awt.Color(0, 0, 0));
        infoLBL.setText("Choose Fish to Add and Enter Details");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(returnBTN)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(exitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fishIMG2LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(fishIMG1LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 292, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(fishIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(specificInputTF)
                                .addComponent(colourTF, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE))
                            .addComponent(fishCB, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(105, 105, 105))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(fishIDLBL)
                                        .addComponent(fishCoughtLBL)
                                        .addComponent(colourLBL)
                                        .addComponent(changeLBL))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(addBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(displayBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addComponent(searchBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(QuotaBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(deleteBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(11, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(appNameLBL)
                        .addGap(264, 264, 264))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(infoLBL)
                        .addGap(275, 275, 275))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(appNameLBL)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(infoLBL)
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fishCoughtLBL)
                            .addComponent(fishCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(fishIDLBL)
                            .addComponent(fishIDTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colourLBL)
                            .addComponent(colourTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(specificInputTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(changeLBL)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(fishIMG2LBL)))
                .addGap(64, 64, 64)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(displayBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(QuotaBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jScrollPane1))
                    .addComponent(fishIMG1LBL, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(returnBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exitBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitBTNActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitBTNActionPerformed

    private void returnBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_returnBTNActionPerformed
        // TODO add your handling code here:
        new FishermanGUI().setVisible(true);
        this.dispose();

    }//GEN-LAST:event_returnBTNActionPerformed

    private void displayBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBTNActionPerformed
        // TODO add your handling code here:
        String displayFish = "";
        //loop for every object in fishList
        for (Fish fish : fishList) {
            displayFish += fish.printDetails() + "\n"; ///every fish object details are added to displayFish string from printDetails method
        }
        resultTA.setText(displayFish); ///print to TA

    }//GEN-LAST:event_displayBTNActionPerformed

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        // TODO add your handling code here:
        int specificInput;
        String fishID = fishIDTF.getText();
        String colour = colourTF.getText();
        String specificInputString = specificInputTF.getText();
        String fishSelected = (String) fishCB.getSelectedItem();//getting the selection from the combo box and casting to a string

        //Ensure inputs are filled out
        if (fishID.isEmpty() || colour.isEmpty() || specificInputString.isEmpty()) {
            resultTA.setText("Enter into all fields");
            return;
        }
        ///creating a try catch and parsing the specificInputString to an int 
        ///validating the paased input insuring it's an int using NumberFormatException
        try {
            specificInput = Integer.parseInt(specificInputString);
        } catch (NumberFormatException nfe) {
            resultTA.setText("Third input must be a number");
            return;
        }

        //create the fish object
        Fish newFish;
        ///switch statemnent to save correct object and increase counter for quotas 
        switch (fishSelected) {
            case "Tuna":
                newFish = new Tuna(specificInput, fishID, colour);
                tunaCounter++; //increse tuna count by 1
                break;
            case "Herring":
                newFish = new Herring(specificInput, fishID, colour);
                herringCounter++; //increse herring count by 1
                break;
            case "Cod":
                newFish = new Cod(specificInput, fishID, colour);
                codCounter++; //increse cod count by 1
                break;
            default:
                resultTA.setText("Invalid Fish Selected");
                return;
        }

        //add new fish to fishList
        fishList.add(newFish);

        //declare file class, fileOutputStream, ObjectOutputStream
        File f;
        FileOutputStream fStream;
        ObjectOutputStream oStream;
        try {
            f = new File("fishList.dat");
            fStream = new FileOutputStream(f);
            oStream = new ObjectOutputStream(fStream);
            //write arraylist to file 
            oStream.writeObject(fishList);
            ///close file
            oStream.close();

        } catch (IOException e) {
            System.out.println("I/O e: " + e);
        }

//        for (Fish fish : fishList) {
//            System.out.println(fish.printDetails());  // Print the details using printDetails()from fish
//        }
        //announce to user fish was added successfully 
        resultTA.setText(fishSelected + " Added Successfully");

        //clear TFs
        fishIDTF.setText("");
        colourTF.setText("");
        specificInputTF.setText("");

    }//GEN-LAST:event_addBTNActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        // TODO add your handling code here:

        // to find the fish id to delete
        String fishID = JOptionPane.showInputDialog(this, "Enter Fish ID to delete:");

        if (fishID == null) {
            JOptionPane.showMessageDialog(this, "Fish ID cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // loop created to fine the correct fishID 
        boolean found = false;
        for (Fish fish : fishList) {
            if (fish.getFishID().equals(fishID)) { ///calling the getFishID method from fish
                fishList.remove(fish);  // Remov the fish
                found = true; /// set found to true if found
                break;
            }
        }

        // output for user if the deletion was successful or not
        if (found) {
            JOptionPane.showMessageDialog(this, "Fish with ID " + fishID + " deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);

            // Save the updated fishlist
            try {
                File f = new File("fishList.dat");
                FileOutputStream fStream = new FileOutputStream(f);
                ObjectOutputStream oStream = new ObjectOutputStream(fStream);
                oStream.writeObject(fishList);
                oStream.close();
            } catch (IOException e) {
                System.out.println("I/O Error: " + e);
                JOptionPane.showMessageDialog(this, "Error saving the updated list.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Fish with ID " + fishID + " not found.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void QuotaBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuotaBTNActionPerformed
        // TODO add your handling code here:

        // create a stringbuilder so all the messages can get merged and displayed at once
        StringBuilder result = new StringBuilder();

        // tuna tracker
        if (tunaCounter <= 5) {
            result.append("Tuna's population is healthy and okay to continue fishing!\n");
        } else if (tunaCounter > 5 && tunaCounter <= 15) {
            result.append("Tuna's population is moderate, be wary not to overfish!!\n");
        } else {
            result.append("Tuna's population is being overfished, stop catching tuna!!\n");
        }

        // herring tracker
        if (herringCounter <= 5) {
            result.append("Herring's population is healthy and okay to continue fishing!\n");
        } else if (herringCounter > 5 && herringCounter <= 15) {
            result.append("Herring's population is moderate, be wary not to overfish!!\n");
        } else {
            result.append("Herring's population is being overfished, stop catching herring!!\n");
        }

        // cod tracker
        if (codCounter <= 5) {
            result.append("Cod's population is healthy and okay to continue fishing!\n");
        } else if (codCounter > 5 && codCounter <= 15) {
            result.append("Cod's population is moderate, be wary not to overfish!!\n");
        } else {
            result.append("Cod's population is being overfished, stop catching cod!!\n");
        }

        // merge the results to TA
        resultTA.setText(result.toString());
        System.out.println(tunaCounter);
    }//GEN-LAST:event_QuotaBTNActionPerformed

    private void searchBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBTNActionPerformed
        // TODO add your handling code here:
        // Search for fishID
        String fishID = JOptionPane.showInputDialog(this, "Enter Fish ID to delete:");

        if (fishID == null) {
            JOptionPane.showMessageDialog(this, "Fish ID cannot be empty.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // loop created to find the correct fishID 
        String test = "";
        boolean found = false;
        for (Fish fish : fishList) {
            if (fish.getFishID().equals(fishID)) { ///calling the getFishID method from fish
                test += fish.printDetails();
                found = true; /// set found to true
                break;
            }
        }
        resultTA.setText(test);

        // output for user if the deletion was successful or not
        if (!found) {
            JOptionPane.showMessageDialog(this, "Fish with ID " + fishID + " does not exist, please try again", "Fail", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_searchBTNActionPerformed

    private void loadFishFile() {
        ///declaring file names
        File f;
        FileInputStream fStream;
        ObjectInputStream oStream;
        try {
            f = new File("fishList.dat");
            fStream = new FileInputStream(f);
            oStream = new ObjectInputStream(fStream);
            ///save the file data to arraylist
            //cast it to arraylist holding our fish obj
            fishList = (ArrayList<Fish>) oStream.readObject();
            oStream.close();
        } catch (IOException | ClassNotFoundException e) { ///catch for any file errors and displayed on system
            System.out.println("File input " + e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FishInputGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FishInputGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FishInputGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FishInputGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FishInputGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton QuotaBTN;
    private javax.swing.JButton addBTN;
    private javax.swing.JLabel appNameLBL;
    private javax.swing.JLabel changeLBL;
    private javax.swing.JLabel colourLBL;
    private javax.swing.JTextField colourTF;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JButton displayBTN;
    private javax.swing.JButton exitBTN;
    private javax.swing.JComboBox<String> fishCB;
    private javax.swing.JLabel fishCoughtLBL;
    private javax.swing.JLabel fishIDLBL;
    private javax.swing.JTextField fishIDTF;
    private javax.swing.JLabel fishIMG1LBL;
    private javax.swing.JLabel fishIMG2LBL;
    private javax.swing.JLabel infoLBL;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea resultTA;
    private javax.swing.JButton returnBTN;
    private javax.swing.JButton searchBTN;
    private javax.swing.JTextField specificInputTF;
    // End of variables declaration//GEN-END:variables
}
